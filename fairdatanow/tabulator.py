"""Another try using panel"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/11_exploring-your-remote-data-with-tabulator.ipynb.

# %% auto 0
__all__ = ['RemoteData2']

# %% ../notebooks/11_exploring-your-remote-data-with-tabulator.ipynb 10
import nc_py_api 
from nc_py_api import Nextcloud 
import panel as pn
import param 
import humanize
import pandas as pd
import os 
import re

# %% ../notebooks/11_exploring-your-remote-data-with-tabulator.ipynb 11
pn.extension('tabulator')

def _node_to_dataframe2(fsnode): 
    '''Convert `fsnode` object to polars a single row polars dataframe.'''

    df = pd.DataFrame({'path': [fsnode.user_path], 'size': [fsnode.info.size], 'mimetype': [fsnode.info.mimetype], 'modified': [fsnode.info.last_modified], 
                   'isdir': [fsnode.is_dir], 'ext': [os.path.splitext(fsnode.user_path)[1]]})

    return df 



class RemoteData2(object): 
    
    # See: https://help.nextcloud.com/t/using-nc-py-api-i-cant-download-any-file-due-to-ssl-certificte-verify-failed/194019 
    nc_py_api.options.NPA_NC_CERT = False 

    def __init__(self, configuration): 
        '''Recursively scan the contents of a remote webdav server as specified by `configuration`. 
        '''

        # parse configuration 
        m = re.match('(^https://[^/]+/)(.*)', configuration['url'])
        nextcloud_url, self.cache_dir = m.groups()
        nc_auth_user = configuration['user']
        nc_auth_pass = configuration['password'] 
               
        # Instantiate Nextcloud client 
        self.nc = Nextcloud(nextcloud_url=nextcloud_url, nc_auth_user=nc_auth_user, nc_auth_pass=nc_auth_pass) 
        

    def listdir(self, subdir=None, search_regex='', searchBuilder={}): 
        '''Create interactive file table for remote subdirectory `subdir`. 

        If subdir is not specified the complete project directory is scanned. 
        '''

        if subdir is None: 
            subdir = self.cache_dir 

        print(f'Please wait while scanning all file paths in remote folder...') 
            
        # query webdav server to obtain file listing 
        fs_nodes_list = self.nc.files.listdir(subdir, depth=-1, exclude_self=False) 
        
        n_paths = len(fs_nodes_list)

        # initialize polars dataframe with first row to fix schema 
        self.df = _node_to_dataframe2(fs_nodes_list[0]) 
        
        #sum the sizes to find the total storage space
        total_size_bytes = self.df['size'].sum()
        total_size = humanize.naturalsize(total_size_bytes, True)

        
        for fsnode in fs_nodes_list[1:]: 
            self.df = pd.concat([self.df, _node_to_dataframe2(fsnode)], ignore_index=True) 

        self.df.reset_index()

        # panel components   
        self.search_filter = pn.widgets.TextInput(name='Search filter', value='xray') 
        self.file_table = pn.widgets.Tabulator(self.df, height=350, pagination=None, show_index=False)
        self.row_counter = pn.pane.Str(f"Showing {len(self.df)} out of {len(self.df)} rows") 

        # update file table and row counter to search filter 
        self.file_table.add_filter(pn.bind(self._contains_filter, pattern=self.search_filter, column='path'))   

        # create panel layout
        self.layout = pn.Column(self.search_filter, self.file_table, self.row_counter)
        

        return self.layout 


    
    def _contains_filter(self, df, pattern, column): 
        '''String contains `pattern` filter function on 'column` of dataframe `df`. '''
        
        if not pattern:
            self.row_counter.object = f"Showing {len(df)} out of {len(df)} rows"
            return df 
            
        filtered_df = df[df[column].str.contains(pattern)]
        
        self.row_counter.object = f"Showing {len(filtered_df)} out of {len(df)} rows" 
        
        return filtered_df

