# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/12_dataviewer.ipynb.

# %% auto 0
__all__ = ['DataViewer']

# %% ../notebooks/12_dataviewer.ipynb 7
import panel as pn
import param
from panel.viewable import Viewer
import pandas as pd
from humanize import naturalsize

pn.extension("tabulator")

# %% ../notebooks/12_dataviewer.ipynb 8
class DataViewer(Viewer):
    # DataFrames
    data = param.DataFrame()
    filtered_data = param.DataFrame()
    # list filters
    columns = param.ListSelector(default=["path", "size", "modified"])
    extensions = param.ListSelector(default=[])
    # typed filters
    search = param.String(default="xray")
    bytes_amount = param.Integer()
    show_directories = param.Boolean(default=False)
    show_filters = param.Boolean(default=False)

    def __init__(self, **params):
        super().__init__(**params)
        # load all options for the ListSelectors
        self.param.columns.objects = self.data.columns.to_list()
        self.param.extensions.objects = self.data['ext'].unique()

    
    @param.depends("data", "columns", "search", "extensions", "show_directories", watch=True, on_init=True)
    def _update_filtered_data(self):
        # set the base df for readability and a non-watched variable
        df = self.data
        # search the dataframe in column path if it contains the search string
        df = df[df["path"].str.contains(self.search)]
        # filter to only include the extensions that are selected
        if self.extensions:
            df = df[df["ext"].isin(self.extensions)]
        # save the total bytes_size in the bytes_amount variable
        self.bytes_amount = df[df["isdir"] == False]["byte_size"].sum()
        # if show_directories is turned off exclude them from the df
        if not self.show_directories:
            df = df[df["isdir"] == False]
        # only select the columns from the column selector
        self.filtered_data = df[self.columns]
    
    @param.depends("filtered_data")
    def number_of_rows(self):
        return f"Showing {len(self.filtered_data)} out of {len(self.data)} rows | Total size: {naturalsize(self.bytes_amount, True)}"

    @param.depends("show_filters")
    def make_widgetbox(self):
        if self.show_filters:
            self.filter_menu = pn.WidgetBox('# Filters',
                                            pn.widgets.MultiChoice.from_param(self.param.columns),
                                            pn.widgets.MultiChoice.from_param(self.param.extensions),
                                            pn.widgets.Checkbox.from_param(self.param.show_directories)
                                           )
            return self.filter_menu
        self.filter_menu = None
        
    
    def __panel__(self):
        return pn.Column(
            pn.Row(pn.widgets.TextInput.from_param(self.param.search), 
                   pn.widgets.Checkbox.from_param(self.param.show_filters),
                   self.make_widgetbox
                  ),
            pn.widgets.Tabulator(self.param.filtered_data, height=350, pagination=None, show_index=False, selectable=True, disabled=True),
            self.number_of_rows
        )
